import { HoneycombSDK } from '@honeycombio/opentelemetry-node';
import { context, trace, propagation, SpanStatusCode } from '@opentelemetry/api';
import { HttpInstrumentation } from '@opentelemetry/instrumentation-http';
import { ROOT_PACKAGE_JSON } from '../utils/json.js';
let sdk;
/** Starts the tracing SDK, if there's already a tracing service this will be a no-op */
export const startTracing = function (options) {
    if (!options.enabled)
        return;
    if (sdk)
        return;
    sdk = new HoneycombSDK({
        serviceName: ROOT_PACKAGE_JSON.name,
        endpoint: `http://${options.host}:${options.port}`,
        instrumentations: [new HttpInstrumentation()],
    });
    sdk.start();
    // Sets the current trace ID and span ID based on the options received
    // this is used as a way to propagate trace context from Buildbot
    trace.setSpanContext(context.active(), {
        traceId: options.traceId,
        spanId: options.parentSpanId,
        traceFlags: options.traceFlags,
        isRemote: true,
    });
};
/** Stops the tracing service if there's one running. This will flush any ongoing events */
export const stopTracing = async function () {
    if (!sdk)
        return;
    return sdk.shutdown();
};
/** Sets attributes to be propagated across child spans under the current context */
export const setMultiSpanAttributes = function (attributes) {
    const currentBaggage = propagation.getBaggage(context.active());
    let baggage = currentBaggage === undefined ? propagation.createBaggage() : currentBaggage;
    Object.entries(attributes).forEach((entry) => {
        baggage = baggage.setEntry(entry[0], { value: entry[1] });
    });
    return propagation.setBaggage(context.active(), baggage);
};
/** Add error information to the current active span (if any) */
export const addErrorToActiveSpan = function (error) {
    const span = trace.getActiveSpan();
    if (!span)
        return;
    span.recordException(error);
    span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message,
    });
};
